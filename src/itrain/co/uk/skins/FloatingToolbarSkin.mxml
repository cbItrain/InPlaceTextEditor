<?xml version="1.0" encoding="utf-8"?>

<!--

	ADOBE SYSTEMS INCORPORATED
	Copyright 2008 Adobe Systems Incorporated
	All Rights Reserved.

	NOTICE: Adobe permits you to use, modify, and distribute this file
	in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for a Spark TitleWindow container.

	 @see spark.skins.spark.TitleWindowCloseButtonSkin
	 @see spark.components.TitleWindow

	 @langversion 3.0
	 @playerversion Flash 10
	 @playerversion AIR 1.5
	 @productversion Flex 4
-->
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009"
			 xmlns:s="library://ns.adobe.com/flex/spark"
			 xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
			 blendMode="normal"
			 mouseEnabled="false"
			 minWidth="76"
			 minHeight="76"
			 alpha.disabled="0.5"
			 alpha.disabledWithControlBar="0.5">

	<fx:Metadata>
		<![CDATA[ 
        /** 
         * @copy spark.skins.spark.ApplicationSkin#hostComponent
         */
        [HostComponent("spark.components.TitleWindow")]
        ]]>
	</fx:Metadata>

	<fx:Script fb:purpose="styling">
		<![CDATA[
			import mx.core.FlexVersion;
			import mx.managers.CursorManager;
			import mx.managers.CursorManagerPriority;

			/* Define the skin elements that should not be colorized.
			For panel, border and title background are skinned, but the content area, background, border, and title text are not. */
			static private const exclusions:Array=["background", "titleDisplay", "contentGroup", "border"];

			/* exclusions before Flex 4.5 for backwards-compatibility purposes */
			static private const exclusions_4_0:Array=["background", "titleDisplay", "contentGroup"];
			
			[Bindable]
			private static var pinned:Boolean = false;

			/**
			 * @private
			 */

			[Bindable]
			[Embed(source="assets/icons/move-cursor.png")]
			private var _moveCursor:Class;

			private var _crossCursorId:int=-1;

			private function onMouseOver():void {
				_crossCursorId=CursorManager.setCursor(_moveCursor, CursorManagerPriority.LOW, -8.0, -8.0);
			}

			private function onMouseOut():void {
				if (_crossCursorId > -1) {
					CursorManager.removeCursor(_crossCursorId);
					_crossCursorId=-1;
				}
			}

			override public function get colorizeExclusions():Array {
				// Since border is styleable via borderColor, no need to allow chromeColor to affect
				// the border.  This is wrapped in a compatibility flag since this change was added  
				// in Flex 4.5
				if (FlexVersion.compatibilityVersion < FlexVersion.VERSION_4_5) {
					return exclusions_4_0;
				}

				return exclusions;
			}

			/**
			 * @private
			 */
			override protected function initializationComplete():void {
				useChromeColor=true;
				super.initializationComplete();
			}

			/**
			 * @private
			 */
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void {
				if (getStyle("borderVisible") == true) {
					border.visible=true;
					background.left=background.top=background.right=background.bottom=1;
					contents.left=contents.top=contents.right=contents.bottom=1;
				} else {
					border.visible=false;
					background.left=background.top=background.right=background.bottom=0;
					contents.left=contents.top=contents.right=contents.bottom=0;
				}

				dropShadow.visible=getStyle("dropShadowVisible");

				var cr:Number=getStyle("cornerRadius");

				if (cornerRadius != cr) {
					cornerRadius=cr;

					dropShadow.tlRadius=cornerRadius;
					dropShadow.trRadius=cornerRadius;
					dropShadow.blRadius=cornerRadius;
					dropShadow.brRadius=cornerRadius;

					setPartCornerRadii(topMaskRect);
					setPartCornerRadii(border);
					setPartCornerRadii(background);
				}

				if (bottomMaskRect)
					setPartCornerRadii(bottomMaskRect);

				borderStroke.color=getStyle("borderColor");
				borderStroke.alpha=getStyle("borderAlpha");
				backgroundFill.color=getStyle("backgroundColor");
				backgroundFill.alpha=getStyle("backgroundAlpha");

				super.updateDisplayList(unscaledWidth, unscaledHeight);
			}

			/**
			 * @private
			 */
			private function setPartCornerRadii(target:Rect):void {
				target.topLeftRadiusX=cornerRadius;
				target.topRightRadiusX=cornerRadius;
				target.bottomLeftRadiusX=cornerRadius;
				target.bottomRightRadiusX=cornerRadius;
			}

			private var cornerRadius:Number;
		]]>
	</fx:Script>

	<s:states>
		<s:State name="normal"/>
		<s:State name="inactive"
				 stateGroups="inactiveGroup"/>
		<s:State name="disabled"/>
		<s:State name="normalWithControlBar"
				 stateGroups="withControls"/>
		<s:State name="inactiveWithControlBar"
				 stateGroups="withControls, inactiveGroup"/>
		<s:State name="disabledWithControlBar"
				 stateGroups="withControls"/>
	</s:states>

	<!--- drop shadow can't be hittable so it stays sibling of other graphics @private-->
	<s:RectangularDropShadow id="dropShadow"
							 blurX="20"
							 blurY="20"
							 alpha="0.32"
							 alpha.inactiveGroup="0.22"
							 distance="11"
							 distance.inactiveGroup="7"
							 angle="90"
							 color="0x000000"
							 left="0"
							 top="0"
							 right="0"
							 bottom="0"/>

	<!--- drop shadow can't be hittable so all other graphics go in this group -->
	<s:Group left="0"
			 right="0"
			 top="0"
			 bottom="0">

		<!--- top group mask @private-->
		<s:Group left="1"
				 top="1"
				 right="1"
				 bottom="1"
				 id="topGroupMask">
			<!--- @private-->
			<s:Rect id="topMaskRect"
					left="0"
					top="0"
					right="0"
					bottom="0">
				<s:fill>
					<s:SolidColor alpha="0"/>
				</s:fill>
			</s:Rect>
		</s:Group>

		<!--- bottom group mask @private-->
		<s:Group left="1"
				 top="1"
				 right="1"
				 bottom="1"
				 id="bottomGroupMask"
				 includeIn="withControls">
			<!--- @private-->
			<s:Rect id="bottomMaskRect"
					left="0"
					top="0"
					right="0"
					bottom="0">
				<s:fill>
					<s:SolidColor alpha="0"/>
				</s:fill>
			</s:Rect>
		</s:Group>

		<!--- layer 1: border @private -->
		<s:Rect id="border"
				left="0"
				right="0"
				top="0"
				bottom="0">
			<s:stroke>
				<!--- Defines the TitleWindowSkin class's border stroke. The default value is 1. -->
				<s:SolidColorStroke id="borderStroke"
									weight="1"/>
			</s:stroke>
		</s:Rect>

		<!-- layer 2: background fill -->
		<!--- Defines the appearance of the TitleWindowSkin class's background. -->
		<s:Rect id="background"
				left="1"
				top="1"
				right="1"
				bottom="1">
			<s:fill>
				<!--- Defines the TitleWindowSkin class's background fill. The default color is 0xFFFFFF. -->
				<s:SolidColor id="backgroundFill"
							  color="#FFFFFF"/>
			</s:fill>
		</s:Rect>

		<!-- layer 3: contents -->
		<!--- Contains the vertical stack of title bar content and control bar. -->
		<s:Group left="1"
				 right="1"
				 top="1"
				 bottom="1"
				 id="contents">
			<s:Group id="moveArea"
					 left="0"
					 right="0"
					 top="0"
					 bottom="0">
				<s:Group width="20"
						 top="27"
						 bottom="3"
						 left="3"
						 mouseOver="onMouseOver()"
						 mouseOut="onMouseOut()">
					<s:Rect width="100%"
							height="100%">
						<s:fill>
							<s:BitmapFill source="@Embed(source='assets/icons/metal.png')"
										  fillMode="repeat"/>
						</s:fill>
					</s:Rect>
				</s:Group>
			</s:Group>
			<s:HGroup height="100%"
					  width="100%"
					  gap="10">
				<s:VGroup width="25"
						  height="25"
						  verticalAlign="middle"
						  horizontalAlign="center">
					<s:ToggleButton id="btnPin"
									width="20"
									height="20"
									selected="{pinned}"
									cornerRadius="5"
									focusEnabled="false"
									change="{pinned = btnPin.selected}"
									left="5"
									top="5"/>
				</s:VGroup>
				<s:Group id="contentGroup"
						 width="100%"
						 height="100%"
						 minWidth="0"
						 minHeight="0"/>
			</s:HGroup>
			<!--- @private -->
		</s:Group>
	</s:Group>
</s:SparkSkin>
